
import { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';

interface ViralFeatures {
  isShakeToSpillEnabled: boolean;
  isAutoShareEnabled: boolean;
  isPushNotificationsEnabled: boolean;
  isGhostModeActive: boolean;
}

export const useViralFeatures = () => {
  const [features, setFeatures] = useState<ViralFeatures>({
    isShakeToSpillEnabled: false,
    isAutoShareEnabled: false,
    isPushNotificationsEnabled: false,
    isGhostModeActive: false,
  });
  const { toast } = useToast();

  // Shake to spill detection
  useEffect(() => {
    if (!features.isShakeToSpillEnabled) return;

    let lastShake = 0;
    const shakeThreshold = 15;

    const handleMotion = (event: DeviceMotionEvent) => {
      const acceleration = event.accelerationIncludingGravity;
      if (!acceleration) return;

      const { x, y, z } = acceleration;
      const movement = Math.sqrt(x! * x! + y! * y! + z! * z!);

      if (movement > shakeThreshold && Date.now() - lastShake > 1000) {
        lastShake = Date.now();
        
        // Haptic feedback
        if (navigator.vibrate) {
          navigator.vibrate([100, 50, 100]);
        }

        toast({
          title: "🫖 Shake detected!",
          description: "Ready to spill some tea?",
          duration: 2000,
        });

        // Trigger spill modal or navigation
        const spillEvent = new CustomEvent('shakeToSpill');
        window.dispatchEvent(spillEvent);
      }
    };

    window.addEventListener('devicemotion', handleMotion);
    return () => window.removeEventListener('devicemotion', handleMotion);
  }, [features.isShakeToSpillEnabled, toast]);

  // Push notifications setup
  const enablePushNotifications = async () => {
    if (!('Notification' in window)) {
      toast({
        title: "Notifications not supported",
        description: "Your browser doesn't support push notifications",
        variant: "destructive"
      });
      return false;
    }

    const permission = await Notification.requestPermission();
    if (permission === 'granted') {
      setFeatures(prev => ({ ...prev, isPushNotificationsEnabled: true }));
      toast({
        title: "🔔 Notifications enabled!",
        description: "You'll get alerts for trending spills",
      });
      return true;
    }

    return false;
  };

  // Auto-share functionality
  const enableAutoShare = () => {
    setFeatures(prev => ({ ...prev, isAutoShareEnabled: true }));
    toast({
      title: "📱 Auto-share enabled!",
      description: "Viral content will be auto-shared to your socials",
    });
  };

  // Ghost mode toggle
  const toggleGhostMode = () => {
    setFeatures(prev => ({ 
      ...prev, 
      isGhostModeActive: !prev.isGhostModeActive 
    }));
    
    toast({
      title: features.isGhostModeActive ? "👻 Ghost mode disabled" : "🕵️ Ghost mode enabled",
      description: features.isGhostModeActive 
        ? "Your identity is now visible" 
        : "Maximum stealth activated",
    });
  };

  // Shake to spill toggle
  const toggleShakeToSpill = () => {
    setFeatures(prev => ({ 
      ...prev, 
      isShakeToSpillEnabled: !prev.isShakeToSpillEnabled 
    }));
    
    toast({
      title: features.isShakeToSpillEnabled ? "📱 Shake disabled" : "🫖 Shake to spill enabled!",
      description: features.isShakeToSpillEnabled 
        ? "Shake detection turned off" 
        : "Shake your phone to quickly spill tea",
    });
  };

  // Generate shareable content
  const generateShareableContent = (content: string, isViral: boolean = false) => {
    const hashtags = ['#CTeaSpill', '#OnChainGossip', '#Web3Drama'];
    const viralHashtags = ['#ViralTea', '#CryptoGossip', '#ChaosMode'];
    
    const tags = isViral ? [...hashtags, ...viralHashtags] : hashtags;
    const shareText = `${content}\n\n${tags.join(' ')}\n\nSpilled on CTea Newsroom 🫖`;
    
    return shareText;
  };

  // Social sharing
  const shareToSocial = async (content: string, platform: 'twitter' | 'native' = 'native') => {
    const shareableContent = generateShareableContent(content, true);
    
    if (platform === 'twitter') {
      const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareableContent)}`;
      window.open(twitterUrl, '_blank');
    } else if (navigator.share) {
      try {
        await navigator.share({
          title: 'CTea Newsroom Spill',
          text: shareableContent,
          url: window.location.href
        });
      } catch (error) {
        if (process.env.NODE_ENV === "development") { if (process.env.NODE_ENV === "development") { console.log('Share cancelled or failed');
      }
    }
  };

  return {
    features,
    enablePushNotifications,
    enableAutoShare,
    toggleGhostMode,
    toggleShakeToSpill,
    shareToSocial,
    generateShareableContent
  };
};
