
import { useState, useCallback } from 'react';
import { getWalletBalance } from '@/lib/api/rewards';
import type { WalletUser, AuthSession } from '@/types/auth';

export const useAuthState = () => {
  const [user, setUser] = useState<WalletUser | null>(null);
  const [session, setSession] = useState<AuthSession | null>(null);
  const [loading, setLoading] = useState(false);

  if (process.env.NODE_ENV === "development") { if (process.env.NODE_ENV === "development") { console.log('üîê [AuthState] Current state:', { 
    hasUser: !!user, 
    hasSession: !!session, 
    loading,
    userWallet: user?.wallet_address
  });

  // Enhanced admin/moderator check based on verification level
  const isAdmin = user?.verification_level === 'admin';
  const isModerator = user?.verification_level === 'moderator' || isAdmin;

  if (process.env.NODE_ENV === "development") { if (process.env.NODE_ENV === "development") { console.log('üõ°Ô∏è [AuthState] Role check:', { isAdmin, isModerator, verificationLevel: user?.verification_level });

  // Refresh wallet balance
  const refreshBalance = useCallback(async () => {
    if (!user?.wallet_address) {
      if (process.env.NODE_ENV === "development") { if (process.env.NODE_ENV === "development") { console.log('‚ö†Ô∏è [AuthState] Cannot refresh balance - no wallet address');
      return;
    }

    try {
      if (process.env.NODE_ENV === "development") { if (process.env.NODE_ENV === "development") { console.log('üí∞ [AuthState] Refreshing balance for:', user.wallet_address);
      const balance = await getWalletBalance(user.wallet_address);
      setUser(prev => prev ? {
        ...prev,
        token_balance: balance.tea_balance
      } : null);
      if (process.env.NODE_ENV === "development") { if (process.env.NODE_ENV === "development") { console.log('‚úÖ [AuthState] Balance refreshed:', balance.tea_balance);
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('‚ùå [AuthState] Failed to refresh balance:', error);
    }
  }, [user?.wallet_address]);

  return {
    user,
    setUser,
    session,
    setSession,
    loading,
    setLoading,
    isAdmin,
    isModerator,
    refreshBalance
  };
};
