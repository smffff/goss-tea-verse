import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface UserProgression {
  current_xp: number;
  current_level: number;
  tea_points: number;
  total_posts: number;
  total_reactions_given: number;
  total_reactions_received: number;
}

interface UserLevel {
  level: number;
  name: string;
  min_xp: number;
  max_xp: number | null;
  badge_color: string;
  perks: Record<string, unknown>;
}

export const useUserProgression = () => {
  const [progression, setProgression] = useState<UserProgression>({
    current_xp: 0,
    current_level: 1,
    tea_points: 0,
    total_posts: 0,
    total_reactions_given: 0,
    total_reactions_received: 0
  });
  
  const [currentLevel, setCurrentLevel] = useState<UserLevel>({
    level: 1,
    name: 'New Sipper',
    min_xp: 0,
    max_xp: 100,
    badge_color: '#6b7280',
    perks: {}
  });
  
  const [nextLevel, setNextLevel] = useState<UserLevel | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    loadUserProgression();
    loadUserLevels();
  }, []);

  const loadUserProgression = async () => {
    try {
      const anonymousToken = localStorage.getItem('ctea_anonymous_token');
      if (!anonymousToken) {
        setIsLoading(false);
        return;
      }

      const { data } = await supabase
        .from('user_progression')
        .select('*')
        .eq('anonymous_token', anonymousToken)
        .single();

      if (data) {
        setProgression(data);
      }
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error loading user progression:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadUserLevels = async () => {
    try {
      const { data: levels } = await supabase
        .from('user_levels')
        .select('*')
        .order('level', { ascending: true });

      if (levels && levels.length > 0) {
        const currentLevelData = levels.find(l => l.level === progression.current_level) || levels[0];
        const nextLevelData = levels.find(l => l.level === progression.current_level + 1);
        
        setCurrentLevel({
          ...currentLevelData,
          perks: (currentLevelData.perks as Record<string, unknown>) || {}
        });
        
        if (nextLevelData) {
          setNextLevel({
            ...nextLevelData,
            perks: (nextLevelData.perks as Record<string, unknown>) || {}
          });
        }
      }
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error loading user levels:', error);
    }
  };

  const incrementReaction = async (type: 'given') => {
    try {
      const anonymousToken = localStorage.getItem('ctea_anonymous_token');
      if (!anonymousToken) return;

      const { data: updatedProgression, error } = await supabase
        .from('user_progression')
        .update({ 
          total_reactions_given: progression.total_reactions_given + 1, 
          current_xp: progression.current_xp + 5 
        })
        .eq('anonymous_token', anonymousToken)
        .select('*')
        .single();

      if (error) throw error;

      setProgression(updatedProgression);
      addTeaPoints(2);
      checkLevelUp();
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error incrementing reaction:', error);
    }
  };

  const incrementPost = async () => {
    try {
      const anonymousToken = localStorage.getItem('ctea_anonymous_token');
      if (!anonymousToken) return;

      const { data: updatedProgression, error } = await supabase
        .from('user_progression')
        .update({ 
          total_posts: progression.total_posts + 1, 
          current_xp: progression.current_xp + 20 
        })
        .eq('anonymous_token', anonymousToken)
        .select('*')
        .single();

      if (error) throw error;

      setProgression(updatedProgression);
      addTeaPoints(10);
      checkLevelUp();
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error incrementing post count:', error);
    }
  };

  const addTeaPoints = async (points: number) => {
    try {
      const anonymousToken = localStorage.getItem('ctea_anonymous_token');
      if (!anonymousToken) return;

      const { data: updatedProgression, error } = await supabase
        .from('user_progression')
        .update({ 
          tea_points: progression.tea_points + points, 
          current_xp: progression.current_xp + points 
        })
        .eq('anonymous_token', anonymousToken)
        .select('*')
        .single();

      if (error) throw error;

      setProgression(updatedProgression);
      checkLevelUp();
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error adding tea points:', error);
    }
  };

  const checkLevelUp = async () => {
    try {
      const { data: levels } = await supabase
        .from('user_levels')
        .select('*')
        .order('level', { ascending: true });

      if (!levels || levels.length === 0) return;

      let nextLevelData = levels.find(l => l.level === progression.current_level + 1);

      if (nextLevelData && progression.current_xp >= nextLevelData.min_xp) {
        // Level up!
        const { data: leveledUpProgression, error } = await supabase
          .from('user_progression')
          .update({ current_level: progression.current_level + 1 })
          .eq('anonymous_token', localStorage.getItem('ctea_anonymous_token'))
          .select('*')
          .single();

        if (error) throw error;

        setProgression(leveledUpProgression);

        setCurrentLevel({
          ...nextLevelData,
          perks: (nextLevelData.perks as Record<string, unknown>) || {}
        });

        nextLevelData = levels.find(l => l.level === leveledUpProgression.current_level + 1);

        if (nextLevelData) {
          setNextLevel({
            ...nextLevelData,
            perks: (nextLevelData.perks as Record<string, unknown>) || {}
          });
        } else {
          setNextLevel(null);
        }

        toast({
          title: "Level Up! ðŸŽ‰",
          description: `You've reached level ${leveledUpProgression.current_level}!`,
        });
      }
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error checking level up:', error);
    }
  };

  return {
    progression,
    currentLevel,
    nextLevel,
    isLoading,
    incrementReaction,
    incrementPost,
    addTeaPoints,
    checkLevelUp
  };
};
