
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Zap, Download, Share2, Sparkles } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface MemeRemixerProps {
  submissionId: string;
  content: string;
  category: string;
}

const MemeRemixer: React.FC<MemeRemixerProps> = ({
  submissionId,
  content,
  category
}) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedMeme, setGeneratedMeme] = useState<string | null>(null);
  const [showMemeGenerator, setShowMemeGenerator] = useState(false);
  const { toast } = useToast();

  const generateMeme = async (style: 'classic' | 'modern' | 'savage' | 'wholesome') => {
    setIsGenerating(true);
    try {
      // Simulate meme generation without database call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock generated meme URL
      const mockMemeUrl = `https://via.placeholder.com/400x300/000000/FFFFFF?text=Meme+Generated`;
      setGeneratedMeme(mockMemeUrl);
      
      toast({
        title: "Meme Generated! ðŸŽ¨",
        description: "Your spicy meme is ready to share!",
      });

    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error generating meme:', error);
      toast({
        title: "Meme Generation Failed",
        description: "Couldn't generate your meme. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const shareMeme = async () => {
    if (!generatedMeme) return;
    
    try {
      const shareUrl = `${window.location.origin}/meme/${submissionId}`;
      const shareText = `Check out this spicy meme! ðŸ”¥ #CTea #MemeGenerator`;
      
      if (navigator.share) {
        await navigator.share({
          title: 'CTea Meme',
          text: shareText,
          url: shareUrl
        });
      } else {
        await navigator.clipboard.writeText(`${shareText} ${shareUrl}`);
        toast({
          title: "Link Copied! ðŸ“‹",
          description: "Meme link copied to clipboard"
        });
      }
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error sharing meme:', error);
    }
  };

  return (
    <>
      <Button
        size="sm"
        variant="ghost"
        className="text-gray-400 hover:text-ctea-purple"
        onClick={() => setShowMemeGenerator(!showMemeGenerator)}
      >
        <Sparkles className="w-4 h-4" />
      </Button>

      {showMemeGenerator && (
        <Card className="mt-4 p-4 bg-ctea-darker/50 border border-ctea-purple/20">
          <h4 className="text-white font-medium mb-3 flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-ctea-purple" />
            Meme Remix Generator
          </h4>
          
          <div className="grid grid-cols-2 gap-2 mb-4">
            <Button
              size="sm"
              variant="outline"
              onClick={() => generateMeme('classic')}
              disabled={isGenerating}
              className="border-ctea-purple/30 text-ctea-purple hover:bg-ctea-purple/10"
            >
              ðŸŽ­ Classic
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => generateMeme('modern')}
              disabled={isGenerating}
              className="border-ctea-purple/30 text-ctea-purple hover:bg-ctea-purple/10"
            >
              ðŸš€ Modern
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => generateMeme('savage')}
              disabled={isGenerating}
              className="border-ctea-purple/30 text-ctea-purple hover:bg-ctea-purple/10"
            >
              ðŸ”¥ Savage
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => generateMeme('wholesome')}
              disabled={isGenerating}
              className="border-ctea-purple/30 text-ctea-purple hover:bg-ctea-purple/10"
            >
              ðŸ’– Wholesome
            </Button>
          </div>

          {isGenerating && (
            <div className="text-center py-4">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-ctea-purple mx-auto mb-2"></div>
              <p className="text-sm text-gray-400">Generating your meme...</p>
            </div>
          )}

          {generatedMeme && (
            <div className="space-y-3">
              <img
                src={generatedMeme}
                alt="Generated meme"
                className="w-full rounded-lg border border-ctea-purple/20"
              />
              <div className="flex gap-2">
                <Button size="sm" onClick={shareMeme} className="bg-ctea-purple hover:bg-ctea-purple/80">
                  <Share2 className="w-3 h-3 mr-1" />
                  Share
                </Button>
                <Button size="sm" variant="outline" className="border-ctea-purple/30 text-ctea-purple">
                  <Download className="w-3 h-3 mr-1" />
                  Download
                </Button>
              </div>
            </div>
          )}
        </Card>
      )}
    </>
  );
};

export default MemeRemixer;
