import React, { useState, useEffect } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Trophy, RefreshCw, Crown, Medal, Star, TrendingUp, Users, Zap } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface LeaderboardEntry {
  id: string;
  username: string;
  tea_points: number;
  submissions: number;
  viral_posts: number;
  rank: number;
  avatar?: string;
  is_vip?: boolean;
  is_moderator?: boolean;
  weekly_change?: number;
}

interface LeaderboardProps {
  title?: string;
  period?: 'daily' | 'weekly' | 'monthly' | 'all-time';
  maxEntries?: number;
  showRefresh?: boolean;
  className?: string;
}

const Leaderboard: React.FC<LeaderboardProps> = ({
  title = "Top Contributors",
  period = "weekly",
  maxEntries = 10,
  showRefresh = false,
  className = ""
}) => {
  const [entries, setEntries] = useState<LeaderboardEntry[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());
  const { toast } = useToast();

  // Mock data for development
  const mockEntries: LeaderboardEntry[] = [
    {
      id: '1',
      username: 'CryptoWhale',
      tea_points: 15420,
      submissions: 89,
      viral_posts: 12,
      rank: 1,
      is_vip: true,
      weekly_change: 5.2
    },
    {
      id: '2',
      username: 'AlphaHunter',
      tea_points: 12850,
      submissions: 67,
      viral_posts: 8,
      rank: 2,
      is_moderator: true,
      weekly_change: 3.8
    },
    {
      id: '3',
      username: 'TeaSpiller',
      tea_points: 9870,
      submissions: 45,
      viral_posts: 6,
      rank: 3,
      weekly_change: -1.2
    },
    {
      id: '4',
      username: 'DramaQueen',
      tea_points: 7650,
      submissions: 34,
      viral_posts: 4,
      rank: 4,
      weekly_change: 2.1
    },
    {
      id: '5',
      username: 'GossipGuru',
      tea_points: 6540,
      submissions: 28,
      viral_posts: 3,
      rank: 5,
      weekly_change: 0.8
    },
    {
      id: '6',
      username: 'HotTakes',
      tea_points: 5430,
      submissions: 23,
      viral_posts: 2,
      rank: 6,
      weekly_change: -0.5
    },
    {
      id: '7',
      username: 'SpicyTea',
      tea_points: 4320,
      submissions: 19,
      viral_posts: 1,
      rank: 7,
      weekly_change: 1.7
    },
    {
      id: '8',
      username: 'TeaMaster',
      tea_points: 3210,
      submissions: 15,
      viral_posts: 1,
      rank: 8,
      weekly_change: 0.3
    }
  ];

  useEffect(() => {
    fetchLeaderboard();
  }, [period]);

  const fetchLeaderboard = async () => {
    setIsLoading(true);
    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Use mock data for now
      setEntries(mockEntries.slice(0, maxEntries));
      setLastUpdated(new Date());
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error fetching leaderboard:', error);
      toast({
        title: "Leaderboard Error",
        description: "Couldn't load leaderboard data. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleRefresh = () => {
    fetchLeaderboard();
    toast({
      title: "Refreshing...",
      description: "Updating leaderboard data",
    });
  };

  const getRankIcon = (rank: number) => {
    switch (rank) {
      case 1:
        return <Crown className="w-4 h-4 text-yellow-400" />;
      case 2:
        return <Medal className="w-4 h-4 text-gray-300" />;
      case 3:
        return <Medal className="w-4 h-4 text-amber-600" />;
      default:
        return <Star className="w-4 h-4 text-[#00d1c1]" />;
    }
  };

  const getRankBadge = (rank: number) => {
    switch (rank) {
      case 1:
        return <Badge className="bg-gradient-to-r from-yellow-400 to-yellow-600 text-black font-bold">ðŸ¥‡ 1st</Badge>;
      case 2:
        return <Badge className="bg-gradient-to-r from-gray-300 to-gray-500 text-black font-bold">ðŸ¥ˆ 2nd</Badge>;
      case 3:
        return <Badge className="bg-gradient-to-r from-amber-600 to-amber-800 text-white font-bold">ðŸ¥‰ 3rd</Badge>;
      default:
        return <Badge className="bg-[#00d1c1]/20 text-[#00d1c1] border border-[#00d1c1]/30">#{rank}</Badge>;
    }
  };

  const formatNumber = (num: number) => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  };

  const getPeriodLabel = () => {
    switch (period) {
      case 'daily':
        return 'Today';
      case 'weekly':
        return 'This Week';
      case 'monthly':
        return 'This Month';
      case 'all-time':
        return 'All Time';
      default:
        return 'This Week';
    }
  };

  return (
    <Card className={`bg-ctea-dark/30 border border-[#00d1c1]/20 ${className}`}>
      <div className="p-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-gradient-to-r from-[#00d1c1] to-[#ff61a6] rounded-lg">
              <Trophy className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-bold text-white">{title}</h3>
              <p className="text-sm text-gray-400">{getPeriodLabel()}</p>
            </div>
          </div>
          
          {showRefresh && (
            <Button
              variant="ghost"
              size="sm"
              onClick={handleRefresh}
              disabled={isLoading}
              className="text-[#00d1c1] hover:bg-[#00d1c1]/10 hover:text-white transition-colors duration-200"
              aria-label="Refresh leaderboard"
            >
              <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
            </Button>
          )}
        </div>

        {/* Loading State */}
        {isLoading && (
          <div className="space-y-4">
            {[...Array(maxEntries)].map((_, i) => (
              <div key={i} className="flex items-center gap-4 animate-pulse">
                <div className="w-8 h-8 bg-gray-600 rounded-full"></div>
                <div className="flex-1 space-y-2">
                  <div className="h-4 bg-gray-600 rounded w-3/4"></div>
                  <div className="h-3 bg-gray-700 rounded w-1/2"></div>
                </div>
                <div className="w-16 h-4 bg-gray-600 rounded"></div>
              </div>
            ))}
          </div>
        )}

        {/* Leaderboard Entries */}
        {!isLoading && (
          <div className="space-y-3">
            {entries.map((entry) => (
              <div
                key={entry.id}
                className="flex items-center gap-4 p-3 rounded-lg hover:bg-ctea-dark/20 transition-colors duration-200 group"
              >
                {/* Rank */}
                <div className="flex items-center justify-center w-8 h-8">
                  {getRankIcon(entry.rank)}
                </div>

                {/* User Info */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-2 mb-1">
                    <h4 className="text-white font-medium truncate">
                      {entry.username}
                    </h4>
                    {entry.is_vip && (
                      <Badge className="bg-gradient-to-r from-[#ff61a6] to-[#9b59b6] text-white text-xs">
                        VIP
                      </Badge>
                    )}
                    {entry.is_moderator && (
                      <Badge className="bg-gradient-to-r from-[#00d1c1] to-[#4dd9d4] text-white text-xs">
                        MOD
                      </Badge>
                    )}
                  </div>
                  <div className="flex items-center gap-4 text-xs text-gray-400">
                    <span className="flex items-center gap-1">
                      <Users className="w-3 h-3" />
                      {entry.submissions} posts
                    </span>
                    <span className="flex items-center gap-1">
                      <Zap className="w-3 h-3" />
                      {entry.viral_posts} viral
                    </span>
                    {entry.weekly_change !== undefined && (
                      <span className={`flex items-center gap-1 ${
                        entry.weekly_change > 0 ? 'text-green-400' : 
                        entry.weekly_change < 0 ? 'text-red-400' : 'text-gray-400'
                      }`}>
                        <TrendingUp className="w-3 h-3" />
                        {entry.weekly_change > 0 ? '+' : ''}{entry.weekly_change.toFixed(1)}%
                      </span>
                    )}
                  </div>
                </div>

                {/* Points */}
                <div className="text-right">
                  <div className="text-lg font-bold text-[#00d1c1]">
                    {formatNumber(entry.tea_points)}
                  </div>
                  <div className="text-xs text-gray-400">$TEA</div>
                </div>

                {/* Rank Badge */}
                <div className="hidden sm:block">
                  {getRankBadge(entry.rank)}
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Footer */}
        <div className="mt-6 pt-4 border-t border-[#00d1c1]/20">
          <div className="flex items-center justify-between text-sm text-gray-400">
            <span>Last updated: {lastUpdated.toLocaleTimeString()}</span>
            <span>{entries.length} contributors</span>
          </div>
        </div>

        {/* Empty State */}
        {!isLoading && entries.length === 0 && (
          <div className="text-center py-8">
            <Trophy className="w-12 h-12 text-gray-500 mx-auto mb-4" />
            <p className="text-gray-400">No leaderboard data available</p>
            <Button
              variant="outline"
              size="sm"
              onClick={handleRefresh}
              className="mt-4 border-[#00d1c1]/30 text-[#00d1c1] hover:bg-[#00d1c1]/10"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Try Again
            </Button>
          </div>
        )}
      </div>
    </Card>
  );
};

export default Leaderboard; 