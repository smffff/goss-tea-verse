
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, DollarSign, Coffee, Heart } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface TipModalProps {
  isOpen: boolean;
  onClose: () => void;
  recipientId?: string;
  recipientName?: string;
}

const TipModal: React.FC<TipModalProps> = ({ 
  isOpen, 
  onClose, 
  recipientId, 
  recipientName = "Anonymous" 
}) => {
  const [amount, setAmount] = useState('');
  const [message, setMessage] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();

  const generateBetaAccess = async (): Promise<string> => {
    try {
      // Simple beta code generation
      const codes = ['EARLY-BIRD', 'BETA-ACCESS', 'CTEA2024'];
      return codes[Math.floor(Math.random() * codes.length)];
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Beta access generation error:', error);
      return 'BETA-ACCESS';
    }
  };

  const handleTip = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!amount || parseFloat(amount) <= 0) {
      toast({
        title: "Invalid Amount",
        description: "Please enter a valid tip amount.",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);

    try {
      // Simulate tip processing
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      toast({
        title: "Tip Sent! ðŸ’–",
        description: `Successfully tipped $${amount} to ${recipientName}`,
      });

      // Generate beta access as reward
      const betaCode = await generateBetaAccess();
      
      toast({
        title: "Bonus Reward! ðŸŽ‰",
        description: `Beta code: ${betaCode}`,
      });

      // Reset form and close
      setAmount('');
      setMessage('');
      onClose();
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Tip processing error:', error);
      toast({
        title: "Tip Failed",
        description: "Please try again later.",
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 20 }}
          className="w-full max-w-md"
        >
          <Card className="bg-ctea-dark border-ctea-teal/30 relative overflow-hidden">
            {/* Animated Background */}
            <div className="absolute inset-0 opacity-5">
              <div className="absolute top-0 right-0 w-32 h-32 bg-green-400 rounded-full blur-3xl animate-pulse"></div>
              <div className="absolute bottom-0 left-0 w-24 h-24 bg-yellow-400 rounded-full blur-2xl animate-pulse delay-1000"></div>
            </div>

            <CardHeader className="relative">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-green-400 to-yellow-400 rounded-full flex items-center justify-center">
                    <DollarSign className="w-5 h-5 text-white" />
                  </div>
                  <div>
                    <h2 className="text-xl font-bold text-white">Send Tip</h2>
                    <p className="text-gray-400 text-sm">To: {recipientName}</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onClose}
                  className="text-gray-400 hover:text-white"
                >
                  <X className="w-5 h-5" />
                </Button>
              </div>
            </CardHeader>

            <CardContent className="relative">
              <form onSubmit={handleTip} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="amount" className="text-white">Tip Amount ($)</Label>
                  <Input
                    id="amount"
                    type="number"
                    placeholder="5.00"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    className="bg-ctea-darker border-ctea-teal/30 text-white placeholder-gray-500 focus:border-ctea-teal"
                    step="0.01"
                    min="0.01"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="message" className="text-white">Message (Optional)</Label>
                  <Input
                    id="message"
                    placeholder="Great content! Keep it up!"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    className="bg-ctea-darker border-ctea-teal/30 text-white placeholder-gray-500 focus:border-ctea-teal"
                  />
                </div>

                <div className="flex space-x-3 pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={onClose}
                    className="flex-1 border-gray-600 text-gray-300 hover:bg-gray-700"
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    disabled={isProcessing || !amount}
                    className="flex-1 bg-gradient-to-r from-green-400 to-yellow-400 hover:from-green-400/80 hover:to-yellow-400/80 text-black font-medium"
                  >
                    {isProcessing ? (
                      <div className="flex items-center">
                        <div className="w-4 h-4 border-2 border-black/30 border-t-black rounded-full animate-spin mr-2"></div>
                        Processing...
                      </div>
                    ) : (
                      <div className="flex items-center">
                        <Heart className="w-4 h-4 mr-2" />
                        Send Tip
                      </div>
                    )}
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </AnimatePresence>
  );
};

export default TipModal;
