import React, { useState } from 'react';
import { Dialog, DialogContent } from '@/components/ui/dialog';
import { betaCodeService } from '@/services/betaCodeService';
import { useToast } from '@/hooks/use-toast';
import { Coffee, Wallet, Code } from 'lucide-react';
import AccessModalContent from './access-modal/AccessModalContent';

interface EnhancedAccessModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedPath: 'spill' | 'bribe' | 'code' | null;
  accessCode: string;
  onAccessCodeChange: (code: string) => void;
  onSubmit: () => void;
}

const EnhancedAccessModal: React.FC<EnhancedAccessModalProps> = ({
  isOpen,
  onClose,
  selectedPath,
  accessCode,
  onAccessCodeChange,
  onSubmit
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [generatedCode, setGeneratedCode] = useState('');
  const [spillContent, setSpillContent] = useState('');
  const [tipAmount, setTipAmount] = useState('');
  const [showCode, setShowCode] = useState(false);
  const [step, setStep] = useState<'input' | 'generated' | 'success'>('input');
  const { toast } = useToast();

  const getModalConfig = () => {
    switch (selectedPath) {
      case 'spill':
        return {
          title: 'Spill Your Tea ☕',
          icon: Coffee,
          gradient: 'from-[#FF6B9D] to-[#FF9500]',
          description: 'Share the hottest crypto gossip to unlock your access'
        };
      case 'bribe':
        return {
          title: 'Bribe Accepted 💰',
          icon: Wallet,
          gradient: 'from-[#00D4AA] to-[#4DD9D4]',
          description: 'Send a tip to the tea masters for instant access'
        };
      case 'code':
        return {
          title: 'Enter Access Code 🔑',
          icon: Code,
          gradient: 'from-[#9B59B6] to-[#FF6B9D]',
          description: 'Already have a secret code? Enter it here'
        };
      default:
        return {
          title: 'Access Required',
          icon: Coffee,
          gradient: 'from-[#FF6B9D] to-[#FF9500]',
          description: 'Choose your path to access'
        };
    }
  };

  const config = getModalConfig();

  const handleSpillSubmit = async () => {
    if (!spillContent.trim()) {
      setError('Please enter some tea to spill!');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const mockSubmissionId = crypto.randomUUID();
      const result = await betaCodeService.generateCodeForSpill(mockSubmissionId);
      
      if (result.success && result.code) {
        setGeneratedCode(result.code);
        setStep('generated');
        toast({
          title: "Tea Spilled Successfully! 🫖",
          description: "Your exclusive access code has been generated!",
        });
      } else {
        setError(result.error || 'Failed to generate access code');
      }
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Spill tea error:', error);
      setError('Failed to spill tea. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleBribeSubmit = async () => {
    if (!tipAmount || parseFloat(tipAmount) < 0.001) {
      setError('Minimum tip is 0.001 ETH');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      const testCodes = betaCodeService.getTestCodes();
      const randomCode = testCodes[Math.floor(Math.random() * testCodes.length)];
      setGeneratedCode(randomCode);
      setStep('generated');
      
      toast({
        title: "Bribe Accepted! 💰",
        description: "The gatekeepers have blessed you with access!",
      });
    } catch (error) {
      setError('Payment processing failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleCodeSubmit = async () => {
    if (!accessCode.trim()) {
      setError('Please enter an access code');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const result = await betaCodeService.validateCode(accessCode, true);
      
      if (result.valid) {
        localStorage.setItem('ctea-beta-access', 'granted');
        localStorage.setItem('ctea-beta-code', result.code || accessCode);
        setStep('success');
        toast({
          title: "Access Granted! ☕",
          description: "Welcome to CTea Newsroom!",
        });
        setTimeout(() => onSubmit(), 1500);
      } else {
        setError(result.error || 'Oops, that code\'s gone cold ☕️');
      }
    } catch (error) {
      setError('Verification failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleUseGeneratedCode = async () => {
    if (!generatedCode) return;

    setIsLoading(true);
    try {
      const result = await betaCodeService.validateCode(generatedCode, true);
      
      if (result.valid) {
        localStorage.setItem('ctea-beta-access', 'granted');
        localStorage.setItem('ctea-beta-code', result.code || generatedCode);
        setStep('success');
        toast({
          title: "Welcome to the Newsroom! 🎉",
          description: "Time to spill some tea!",
        });
        setTimeout(() => onSubmit(), 1500);
      } else {
        setError('Code validation failed');
      }
    } catch (error) {
      setError('Verification failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const resetModal = () => {
    setStep('input');
    setError('');
    setGeneratedCode('');
    setSpillContent('');
    setTipAmount('');
    onAccessCodeChange('');
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => {
      if (!open) {
        resetModal();
        onClose();
      }
    }}>
      <DialogContent className={`
        bg-gradient-to-br ${config.gradient} border-white/20 text-white max-w-lg max-h-[90vh] overflow-y-auto
        backdrop-blur-lg shadow-2xl
      `}>
        <AccessModalContent
          selectedPath={selectedPath}
          step={step}
          config={config}
          spillContent={spillContent}
          setSpillContent={setSpillContent}
          tipAmount={tipAmount}
          setTipAmount={setTipAmount}
          accessCode={accessCode}
          onAccessCodeChange={onAccessCodeChange}
          showCode={showCode}
          setShowCode={setShowCode}
          generatedCode={generatedCode}
          error={error}
          isLoading={isLoading}
          onSpillSubmit={handleSpillSubmit}
          onBribeSubmit={handleBribeSubmit}
          onCodeSubmit={handleCodeSubmit}
          onUseGeneratedCode={handleUseGeneratedCode}
        />
      </DialogContent>
    </Dialog>
  );
};

export default EnhancedAccessModal;
