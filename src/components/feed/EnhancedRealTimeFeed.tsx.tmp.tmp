
import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useInfiniteQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { TeaSubmission } from '@/types/teaFeed';
import { transformSubmission } from '@/utils/submissionUtils';
import EnhancedTeaSubmissionCard from '@/components/EnhancedTeaSubmissionCard';
import FeedSkeleton from '@/components/FeedSkeleton';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { 
  RefreshCw, 
  Search, 
  Filter, 
  TrendingUp, 
  Clock, 
  Star,
  Coffee,
  Zap,
  AlertCircle
} from 'lucide-react';
import { useEnhancedRealTime } from '@/hooks/useEnhancedRealTime';

interface FeedFilters {
  category?: string;
  sortBy: 'latest' | 'trending' | 'hot';
  timeRange: 'hour' | 'day' | 'week' | 'all';
  search?: string;
}

const EnhancedRealTimeFeed: React.FC = () => {
  const [submissions, setSubmissions] = useState<TeaSubmission[]>([]);
  const [filters, setFilters] = useState<FeedFilters>({
    sortBy: 'latest',
    timeRange: 'all'
  });
  const [searchQuery, setSearchQuery] = useState('');
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const { toast } = useToast();

  // Set up real-time updates
  useEnhancedRealTime({ setSubmissions });

  // Monitor online status
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // Fetch submissions with infinite scroll
  const {
    data,
    fetchNextPage,
    hasNextPage,
    isFetchingNextPage,
    isLoading,
    isError,
    refetch
  } = useInfiniteQuery({
    queryKey: ['tea-submissions', filters],
    queryFn: async ({ pageParam = 0 }) => {
      const pageSize = 10;
      const offset = pageParam * pageSize;

      let query = supabase
        .from('tea_submissions')
        .select(`
          *,
          reactions,
          evidence_urls
        `)
        .eq('status', 'approved')
        .range(offset, offset + pageSize - 1);

      // Apply filters
      if (filters.category) {
        query = query.eq('category', filters.category);
      }

      if (filters.search) {
        query = query.ilike('content', `%${filters.search}%`);
      }

      // Apply time range filter
      if (filters.timeRange !== 'all') {
        const now = new Date();
        let timeThreshold = new Date();
        
        switch (filters.timeRange) {
          case 'hour':
            timeThreshold.setHours(now.getHours() - 1);
            break;
          case 'day':
            timeThreshold.setDate(now.getDate() - 1);
            break;
          case 'week':
            timeThreshold.setDate(now.getDate() - 7);
            break;
        }
        
        query = query.gte('created_at', timeThreshold.toISOString());
      }

      // Apply sorting
      switch (filters.sortBy) {
        case 'latest':
          query = query.order('created_at', { ascending: false });
          break;
        case 'trending':
          // Sort by engagement score (reactions + comments)
          query = query.order('created_at', { ascending: false }); // Fallback to latest for now
          break;
        case 'hot':
          // Sort by recent activity with high engagement
          query = query.order('created_at', { ascending: false }); // Fallback to latest for now
          break;
      }

      const { data, error } = await query;

      if (error) throw error;

      return {
        submissions: data?.map(transformSubmission) || [],
        nextPage: data && data.length === pageSize ? pageParam + 1 : null
      };
    },
    getNextPageParam: (lastPage) => lastPage.nextPage,
    initialPageParam: 0,
    refetchInterval: 30000, // Refetch every 30 seconds
    staleTime: 10000 // Consider data stale after 10 seconds
  });

  // Flatten all pages into single array
  const allSubmissions = useMemo(() => {
    return data?.pages.flatMap(page => page.submissions) || [];
  }, [data]);

  // Merge with real-time submissions
  const mergedSubmissions = useMemo(() => {
    const realtimeIds = new Set(submissions.map(s => s.id));
    const fetchedSubmissions = allSubmissions.filter(s => !realtimeIds.has(s.id));
    return [...submissions, ...fetchedSubmissions];
  }, [submissions, allSubmissions]);

  const handleSearch = useCallback((query: string) => {
    setSearchQuery(query);
    setFilters(prev => ({ ...prev, search: query || undefined }));
  }, []);

  const handleFilterChange = useCallback((newFilters: Partial<FeedFilters>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
  }, []);

  const handleReaction = useCallback((submissionId: string, reactionType: 'hot' | 'cold' | 'spicy') => {
    if (process.env.NODE_ENV === "development") { if (process.env.NODE_ENV === "development") { console.log(`Reaction ${reactionType} on submission ${submissionId}`);
    // TODO: Implement reaction logic
    toast({
      title: "Reaction added! ðŸ”¥",
      description: "Your reaction has been recorded",
    });
  }, [toast]);

  const handleVote = useCallback((submissionId: string, voteType: 'up' | 'down') => {
    if (process.env.NODE_ENV === "development") { if (process.env.NODE_ENV === "development") { console.log(`Vote ${voteType} on submission ${submissionId}`);
    // TODO: Implement voting logic
  }, []);

  const handleRefresh = useCallback(async () => {
    await refetch();
    toast({
      title: "Feed Refreshed! â˜•",
      description: "Latest tea has been loaded",
    });
  }, [refetch, toast]);

  // Handle scroll for infinite loading
  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + document.documentElement.scrollTop
        >= document.documentElement.offsetHeight - 1000
      ) {
        if (hasNextPage && !isFetchingNextPage) {
          fetchNextPage();
        }
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [hasNextPage, isFetchingNextPage, fetchNextPage]);

  if (isLoading) {
    return <FeedSkeleton />;
  }

  if (isError) {
    return (
      <Card className="bg-red-500/10 border-red-500/20">
        <CardContent className="p-6 text-center">
          <AlertCircle className="w-12 h-12 text-red-400 mx-auto mb-4" />
          <h3 className="text-xl font-bold text-white mb-2">Feed Error</h3>
          <p className="text-gray-400 mb-4">Unable to load the tea feed</p>
          <Button onClick={handleRefresh} variant="outline" className="border-red-500/50 text-red-400">
            <RefreshCw className="w-4 h-4 mr-2" />
            Try Again
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Offline Banner */}
      {!isOnline && (
        <Card className="bg-yellow-500/10 border-yellow-500/20">
          <CardContent className="p-4">
            <div className="flex items-center gap-2 text-yellow-400">
              <AlertCircle className="w-5 h-5" />
              <span className="font-medium">You're offline</span>
              <span className="text-sm text-gray-400">Showing cached content</span>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Feed Controls */}
      <div className="space-y-4">
        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <Input
            placeholder="Search the tea..."
            value={searchQuery}
            onChange={(e) => handleSearch(e.target.value)}
            className="pl-10 bg-ctea-dark/40 border-ctea-teal/30 text-white"
          />
        </div>

        {/* Filters */}
        <div className="flex flex-wrap gap-3">
          {/* Sort Options */}
          <div className="flex gap-2">
            <Button
              size="sm"
              variant={filters.sortBy === 'latest' ? 'default' : 'outline'}
              onClick={() => handleFilterChange({ sortBy: 'latest' })}
              className="text-xs"
            >
              <Clock className="w-3 h-3 mr-1" />
              Latest
            </Button>
            <Button
              size="sm"
              variant={filters.sortBy === 'trending' ? 'default' : 'outline'}
              onClick={() => handleFilterChange({ sortBy: 'trending' })}
              className="text-xs"
            >
              <TrendingUp className="w-3 h-3 mr-1" />
              Trending
            </Button>
            <Button
              size="sm"
              variant={filters.sortBy === 'hot' ? 'default' : 'outline'}
              onClick={() => handleFilterChange({ sortBy: 'hot' })}
              className="text-xs"
            >
              <Zap className="w-3 h-3 mr-1" />
              Hot
            </Button>
          </div>

          {/* Time Range */}
          <div className="flex gap-2">
            {(['hour', 'day', 'week', 'all'] as const).map((range) => (
              <Badge
                key={range}
                variant={filters.timeRange === range ? 'default' : 'outline'}
                className="cursor-pointer text-xs"
                onClick={() => handleFilterChange({ timeRange: range })}
              >
                {range === 'all' ? 'All Time' : `Last ${range}`}
              </Badge>
            ))}
          </div>

          {/* Refresh Button */}
          <Button
            size="sm"
            onClick={handleRefresh}
            variant="outline"
            className="border-ctea-teal/30 text-ctea-teal hover:bg-ctea-teal/10 ml-auto"
          >
            <RefreshCw className="w-3 h-3 mr-1" />
            Refresh
          </Button>
        </div>
      </div>

      {/* Feed Header */}
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold text-white flex items-center gap-2">
          <Coffee className="w-5 h-5 text-ctea-teal" />
          Live Tea Feed
          {submissions.length > 0 && (
            <Badge className="bg-red-500/20 text-red-400 animate-pulse">
              LIVE
            </Badge>
          )}
        </h2>
        <div className="text-sm text-gray-400">
          {mergedSubmissions.length} spills loaded
        </div>
      </div>

      {/* Feed Content */}
      {mergedSubmissions.length === 0 ? (
        <Card className="bg-ctea-dark/40 border-ctea-teal/20">
          <CardContent className="p-12 text-center">
            <div className="text-6xl mb-4">â˜•</div>
            <h3 className="text-xl font-bold text-white mb-2">No tea found</h3>
            <p className="text-gray-400">
              {filters.search ? 'Try a different search term' : 'Be the first to spill some tea!'}
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-6">
          {mergedSubmissions.map((submission) => (
            <EnhancedTeaSubmissionCard
              key={submission.id}
              submission={submission}
              onReaction={handleReaction}
              onVote={handleVote}
            />
          ))}

          {/* Loading More Indicator */}
          {isFetchingNextPage && (
            <Card className="bg-ctea-dark/40 border-ctea-teal/20">
              <CardContent className="p-6 text-center">
                <div className="flex items-center justify-center gap-2 text-ctea-teal">
                  <RefreshCw className="w-4 h-4 animate-spin" />
                  <span>Loading more tea...</span>
                </div>
              </CardContent>
            </Card>
          )}

          {/* End of Feed */}
          {!hasNextPage && mergedSubmissions.length > 0 && (
            <Card className="bg-ctea-dark/20 border-ctea-teal/10">
              <CardContent className="p-6 text-center">
                <Star className="w-8 h-8 text-ctea-teal mx-auto mb-2" />
                <p className="text-gray-400">You've reached the bottom! Time to spill some fresh tea â˜•</p>
              </CardContent>
            </Card>
          )}
        </div>
      )}
    </div>
  );
};

export default EnhancedRealTimeFeed;
