
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Coffee, Plus, TrendingUp, Users, LogOut, MessageCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { TeaSubmission } from '@/types/teaFeed';
import { transformSubmission } from '@/utils/submissionUtils';
import BrandedTeacupIcon from '@/components/ui/BrandedTeacupIcon';
import SpillTeaModal from '@/components/modals/SpillTeaModal';
import LiveTeaSubmissionCard from '@/components/LiveTeaSubmissionCard';

interface LiveTeaAppProps {
  onLogout: () => void;
}

const LiveTeaApp: React.FC<LiveTeaAppProps> = ({ onLogout }) => {
  const [activeSection, setActiveSection] = useState<'feed' | 'community'>('feed');
  const [showSpillModal, setShowSpillModal] = useState(false);
  const [submissions, setSubmissions] = useState<TeaSubmission[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [stats, setStats] = useState({
    totalSpills: 0,
    activeUsers: 0,
    dailyGrowth: 0
  });
  const { toast } = useToast();

  const isDemoMode = localStorage.getItem('ctea-demo-mode') === 'true';
  const userCode = localStorage.getItem('ctea-beta-code') || 'USER';

  // Fetch real submissions from database
  const fetchSubmissions = async () => {
    try {
      setIsLoading(true);
      const { data, error } = await supabase
        .from('tea_submissions')
        .select('*')
        .eq('status', 'approved')
        .order('created_at', { ascending: false })
        .limit(20);

      if (error) throw error;
      
      const transformedData = (data || []).map(transformSubmission);
      setSubmissions(transformedData);
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error fetching submissions:', error);
      toast({
        title: "Error Loading Feed",
        description: "Could not load latest tea. Please refresh.",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch app statistics
  const fetchStats = async () => {
    try {
      const { count: spillCount } = await supabase
        .from('tea_submissions')
        .select('*', { count: 'exact', head: true });

      const { count: userCount } = await supabase
        .from('user_profiles')
        .select('*', { count: 'exact', head: true });

      setStats({
        totalSpills: spillCount || 0,
        activeUsers: userCount || 0,
        dailyGrowth: Math.floor(Math.random() * 50) + 10 // Simulated for now
      });
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error fetching stats:', error);
    }
  };

  // Set up real-time updates
  useEffect(() => {
    fetchSubmissions();
    fetchStats();

    // Subscribe to real-time updates
    const channel = supabase
      .channel('tea_submissions_changes')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'tea_submissions'
        },
        (payload) => {
          if (payload.new.status === 'approved') {
            const newSubmission = transformSubmission(payload.new as any);
            setSubmissions(prev => [newSubmission, ...prev]);
            toast({
              title: "New Tea Spilled! ‚òï",
              description: "Fresh gossip just dropped",
            });
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const handleSpillTea = () => {
    setShowSpillModal(true);
  };

  const handleReaction = async (submissionId: string, reactionType: 'hot' | 'cold' | 'spicy') => {
    try {
      // Update local state optimistically
      setSubmissions(prev => prev.map(submission => {
        if (submission.id === submissionId) {
          return {
            ...submission,
            reactions: {
              ...submission.reactions,
              [reactionType]: submission.reactions[reactionType] + 1
            }
          };
        }
        return submission;
      }));

      toast({
        title: `Reacted with ${reactionType === 'hot' ? 'üî•' : reactionType === 'spicy' ? 'üå∂Ô∏è' : 'üßä'}`,
        description: "Your reaction has been recorded!",
      });
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Reaction error:', error);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-ctea-darker via-ctea-dark to-black flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 border-2 border-ctea-teal/30 border-t-ctea-teal rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white">Loading the hottest tea...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="min-h-screen bg-gradient-to-br from-ctea-darker via-ctea-dark to-black">
        {/* Header */}
        <div className="bg-ctea-dark/80 backdrop-blur-sm border-b border-ctea-teal/20 sticky top-0 z-50">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-gradient-to-r from-ctea-teal to-pink-400 rounded-full flex items-center justify-center">
                  <Coffee className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-white flex items-center gap-2">
                    CTea Newsroom
                    <BrandedTeacupIcon size="sm" />
                  </h1>
                  <p className="text-xs text-gray-400">
                    {isDemoMode ? 'Demo Mode' : `Live ‚Ä¢ ${userCode}`}
                  </p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  onClick={handleSpillTea}
                  className="bg-gradient-to-r from-ctea-teal to-pink-400 hover:from-pink-400 hover:to-ctea-teal text-white font-bold"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Spill Tea
                </Button>
                <Button
                  onClick={onLogout}
                  variant="outline"
                  size="sm"
                  className="border-gray-600 text-gray-400 hover:bg-gray-600"
                >
                  <LogOut className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Navigation */}
        <div className="container mx-auto px-4 py-6">
          <div className="flex gap-2 mb-6">
            <Button
              onClick={() => setActiveSection('feed')}
              variant={activeSection === 'feed' ? 'default' : 'outline'}
              className={activeSection === 'feed' ? 'bg-ctea-teal text-white' : 'border-gray-600 text-gray-400'}
            >
              <TrendingUp className="w-4 h-4 mr-2" />
              Hot Tea
            </Button>
            <Button
              onClick={() => setActiveSection('community')}
              variant={activeSection === 'community' ? 'default' : 'outline'}
              className={activeSection === 'community' ? 'bg-ctea-teal text-white' : 'border-gray-600 text-gray-400'}
            >
              <Users className="w-4 h-4 mr-2" />
              Community
            </Button>
          </div>

          {/* Content */}
          {activeSection === 'feed' && (
            <div className="space-y-6">
              {/* Live Stats */}
              <div className="grid md:grid-cols-3 gap-4">
                <Card className="bg-ctea-dark/60 border-ctea-teal/30">
                  <CardContent className="p-4 text-center">
                    <BrandedTeacupIcon size="lg" variant="spilling" className="mx-auto mb-2" />
                    <div className="text-2xl font-bold text-white">{stats.totalSpills}</div>
                    <div className="text-sm text-gray-400">Tea Spills</div>
                  </CardContent>
                </Card>
                <Card className="bg-ctea-dark/60 border-pink-400/30">
                  <CardContent className="p-4 text-center">
                    <Users className="w-8 h-8 text-pink-400 mx-auto mb-2" />
                    <div className="text-2xl font-bold text-white">{stats.activeUsers}</div>
                    <div className="text-sm text-gray-400">Active Users</div>
                  </CardContent>
                </Card>
                <Card className="bg-ctea-dark/60 border-ctea-purple/30">
                  <CardContent className="p-4 text-center">
                    <TrendingUp className="w-8 h-8 text-ctea-purple mx-auto mb-2" />
                    <div className="text-2xl font-bold text-white">+{stats.dailyGrowth}%</div>
                    <div className="text-sm text-gray-400">Daily Growth</div>
                  </CardContent>
                </Card>
              </div>

              {/* Live Tea Feed */}
              <div className="space-y-4">
                <h2 className="text-xl font-bold text-white mb-4">Live Tea Feed ‚òï</h2>
                {submissions.length === 0 ? (
                  <Card className="bg-ctea-dark/60 border-ctea-teal/30">
                    <CardContent className="p-8 text-center">
                      <div className="text-6xl mb-4">‚òï</div>
                      <h3 className="text-xl font-bold text-white mb-2">No tea yet!</h3>
                      <p className="text-gray-400 mb-4">Be the first to spill some juicy gossip</p>
                      <Button
                        onClick={handleSpillTea}
                        className="bg-gradient-to-r from-ctea-teal to-pink-400 hover:from-pink-400 hover:to-ctea-teal text-white font-bold"
                      >
                        <Plus className="w-4 h-4 mr-2" />
                        Spill the First Tea
                      </Button>
                    </CardContent>
                  </Card>
                ) : (
                  submissions.map((submission) => (
                    <LiveTeaSubmissionCard
                      key={submission.id}
                      submission={submission}
                      onReaction={handleReaction}
                    />
                  ))
                )}
              </div>
            </div>
          )}

          {activeSection === 'community' && (
            <div className="space-y-6">
              <Card className="bg-ctea-dark/60 border-ctea-teal/30">
                <CardHeader>
                  <CardTitle className="text-white flex items-center gap-2">
                    <Users className="w-5 h-5" />
                    Community Stats
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className="text-center p-4 bg-ctea-darker/50 rounded">
                      <div className="text-2xl font-bold text-ctea-teal">Live User</div>
                      <div className="text-sm text-gray-400">Your Status</div>
                    </div>
                    <div className="text-center p-4 bg-ctea-darker/50 rounded">
                      <div className="text-2xl font-bold text-pink-400">{userCode}</div>
                      <div className="text-sm text-gray-400">User Code</div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-ctea-dark/60 border-ctea-teal/30">
                <CardHeader>
                  <CardTitle className="text-white">Join the Movement</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-gray-300">
                    CTea is now live! Share your crypto gossip and help build the hottest community in the space.
                  </p>
                  <div className="flex flex-wrap gap-2">
                    <Badge className="bg-ctea-teal/20 text-ctea-teal border-ctea-teal/50">
                      #CTeaApp
                    </Badge>
                    <Badge className="bg-pink-400/20 text-pink-400 border-pink-400/50">
                      #LiveNow
                    </Badge>
                    <Badge className="bg-ctea-purple/20 text-ctea-purple border-ctea-purple/50">
                      #SpillTheTea
                    </Badge>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </div>

      <SpillTeaModal
        isOpen={showSpillModal}
        onClose={() => setShowSpillModal(false)}
        onSuccess={() => {
          setShowSpillModal(false);
          fetchSubmissions(); // Refresh feed after successful submission
        }}
      />
    </>
  );
};

export default LiveTeaApp;
