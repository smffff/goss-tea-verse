
import React, { useState } from 'react';
import { Switch } from '@/components/ui/switch';
import { useToast } from '@/hooks/use-toast';
import { updateIdentityVisibility, type IdentityVisibility } from '@/lib/api/identityVisibility';

interface IdentityVisibilityToggleProps {
  userId: string;
  currentVisibility: IdentityVisibility;
  isAdminOrMod: boolean;
  onVisibilityChange?: (newVisibility: IdentityVisibility) => void;
}

const IdentityVisibilityToggle: React.FC<IdentityVisibilityToggleProps> = ({
  userId,
  currentVisibility,
  isAdminOrMod,
  onVisibilityChange
}) => {
  const [visibility, setVisibility] = useState<IdentityVisibility>(currentVisibility);
  const [isUpdating, setIsUpdating] = useState(false);
  const { toast } = useToast();

  if (!isAdminOrMod) {
    return null;
  }

  const handleToggle = async (checked: boolean) => {
    const newVisibility: IdentityVisibility = checked ? 'public' : 'anon';
    setIsUpdating(true);

    try {
      const result = await updateIdentityVisibility(userId, newVisibility);
      
      if (result.success) {
        setVisibility(newVisibility);
        onVisibilityChange?.(newVisibility);
        
        toast({
          title: "‚úÖ Visibility Updated",
          description: `Identity is now ${newVisibility === 'public' ? 'public' : 'anonymous'}`,
        });
      } else {
        toast({
          title: "‚òïÔ∏è Could not change visibility",
          description: "Try again in a bit!",
          variant: "destructive",
        });
      }
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Error updating visibility:', error);
      toast({
        title: "‚òïÔ∏è Could not change visibility",
        description: "Try again in a bit!",
        variant: "destructive",
      });
    } finally {
      setIsUpdating(false);
    }
  };

  return (
    <div className="flex items-center space-x-4 p-4 bg-gradient-to-r from-teal-500/10 to-purple-500/10 border border-teal-500/20 rounded-lg">
      <div className="flex items-center space-x-2">
        <div className="animate-pulse">ü´ñ</div>
        <div>
          <h3 className="text-sm font-medium text-white">Identity Visibility</h3>
          <p className="text-xs text-gray-400">
            {visibility === 'public' ? 'Profile is public' : 'Profile is anonymous'}
          </p>
        </div>
      </div>
      
      <div className="flex items-center space-x-2">
        <span className="text-xs text-gray-400">Anon</span>
        <Switch
          checked={visibility === 'public'}
          onCheckedChange={handleToggle}
          disabled={isUpdating}
          className="data-[state=checked]:bg-teal-500"
        />
        <span className="text-xs text-gray-400">Public</span>
      </div>
      
      {isUpdating && (
        <div className="text-xs text-teal-400">Updating...</div>
      )}
    </div>
  );
};

export default IdentityVisibilityToggle;
