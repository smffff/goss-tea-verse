
import React, { useState, useEffect } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Coffee, Menu, X, TrendingUp, Users, Settings, LogOut } from 'lucide-react';
import { useAuth } from '@/hooks/useAuth';
import SpillingTeaCup from '@/components/ui/SpillingTeaCup';

interface StickyNavigationProps {
  className?: string;
}

const StickyNavigation: React.FC<StickyNavigationProps> = ({ className = '' }) => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const { user, signOut } = useAuth();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const navigationItems = [
    { 
      name: 'Feed', 
      path: '/feed', 
      icon: '🔥',
      description: 'Latest tea' 
    },
    { 
      name: 'Leaderboard', 
      path: '/leaderboard', 
      icon: '🏆',
      description: 'Top spillers' 
    },
    { 
      name: 'Spill', 
      path: '/spill', 
      icon: '☕',
      description: 'Share gossip' 
    },
    { 
      name: 'About', 
      path: '/about', 
      icon: '📜',
      description: 'Our story' 
    }
  ];

  const isActive = (path: string) => location.pathname === path;

  const handleSignOut = async () => {
    try {
      await signOut();
      navigate('/');
    } catch (error) {
      if (process.env.NODE_ENV === "development") { console.error('Sign out error:', error);
    }
  };

  return (
    <>
      <motion.nav
        className={`
          fixed top-0 left-0 right-0 z-50 transition-all duration-300
          ${isScrolled 
            ? 'bg-[#1b1b1b]/95 backdrop-blur-lg border-b border-[#FF6B9D]/20 shadow-lg' 
            : 'bg-transparent'
          }
          ${className}
        `}
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between h-16">
            {/* Logo Section */}
            <Link to="/" className="flex items-center space-x-3 group">
              <SpillingTeaCup 
                size="md" 
                animated 
                className="group-hover:scale-110 transition-transform duration-300" 
              />
              <div>
                <h1 
                  className="text-2xl font-bold bg-gradient-to-r from-[#FF6B9D] to-[#00D4AA] bg-clip-text text-transparent"
                  style={{ fontFamily: "'Luckiest Guy', cursive" }}
                >
                  CTea
                </h1>
                <p className="text-xs text-white/60 -mt-1">Newsroom</p>
              </div>
            </Link>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-1">
              {navigationItems.map((item) => (
                <Link
                  key={item.path}
                  to={item.path}
                  className="group relative"
                >
                  <motion.div
                    className={`
                      px-4 py-2 rounded-lg transition-all duration-200 flex items-center space-x-2
                      ${isActive(item.path)
                        ? 'bg-gradient-to-r from-[#FF6B9D]/20 to-[#00D4AA]/20 text-white'
                        : 'text-white/70 hover:text-white hover:bg-white/10'
                      }
                    `}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <span className="text-lg">{item.icon}</span>
                    <span className="font-semibold">{item.name}</span>
                  </motion.div>
                  
                  {/* Tooltip */}
                  <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none">
                    <div className="bg-black/90 text-white text-xs px-2 py-1 rounded whitespace-nowrap">
                      {item.description}
                    </div>
                  </div>
                </Link>
              ))}
            </div>

            {/* User Menu & Mobile Toggle */}
            <div className="flex items-center space-x-4">
              {/* User Section */}
              {user ? (
                <div className="hidden md:flex items-center space-x-3">
                  <div className="text-right">
                    <p className="text-sm font-semibold text-white">
                      {user.email?.split('@')[0] || 'Anonymous'}
                    </p>
                    <p className="text-xs text-white/60">Tea Spiller</p>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleSignOut}
                    className="text-white/70 hover:text-white hover:bg-white/10"
                  >
                    <LogOut className="w-4 h-4" />
                  </Button>
                </div>
              ) : (
                <Link to="/auth">
                  <Button 
                    variant="outline" 
                    size="sm"
                    className="hidden md:flex border-[#FF6B9D] text-[#FF6B9D] hover:bg-[#FF6B9D] hover:text-white"
                  >
                    Join the Tea
                  </Button>
                </Link>
              )}

              {/* Mobile Menu Toggle */}
              <Button
                variant="ghost"
                size="sm"
                className="md:hidden text-white"
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              >
                {isMobileMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
              </Button>
            </div>
          </div>
        </div>

        {/* Mobile Menu */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="md:hidden bg-[#1b1b1b]/95 backdrop-blur-lg border-t border-[#FF6B9D]/20"
            >
              <div className="container mx-auto px-4 py-4 space-y-2">
                {navigationItems.map((item) => (
                  <Link
                    key={item.path}
                    to={item.path}
                    onClick={() => setIsMobileMenuOpen(false)}
                    className={`
                      block px-4 py-3 rounded-lg transition-all duration-200
                      ${isActive(item.path)
                        ? 'bg-gradient-to-r from-[#FF6B9D]/20 to-[#00D4AA]/20 text-white'
                        : 'text-white/70 hover:text-white hover:bg-white/10'
                      }
                    `}
                  >
                    <div className="flex items-center space-x-3">
                      <span className="text-xl">{item.icon}</span>
                      <div>
                        <div className="font-semibold">{item.name}</div>
                        <div className="text-xs text-white/60">{item.description}</div>
                      </div>
                    </div>
                  </Link>
                ))}
                
                {/* Mobile User Section */}
                <div className="pt-4 border-t border-white/10">
                  {user ? (
                    <div className="space-y-2">
                      <div className="px-4 py-2">
                        <p className="text-sm font-semibold text-white">
                          {user.email?.split('@')[0] || 'Anonymous'}
                        </p>
                        <p className="text-xs text-white/60">Tea Spiller</p>
                      </div>
                      <Button
                        variant="ghost"
                        onClick={handleSignOut}
                        className="w-full text-left justify-start text-white/70 hover:text-white hover:bg-white/10"
                      >
                        <LogOut className="w-4 h-4 mr-3" />
                        Sign Out
                      </Button>
                    </div>
                  ) : (
                    <Link to="/auth" onClick={() => setIsMobileMenuOpen(false)}>
                      <Button className="w-full bg-gradient-to-r from-[#FF6B9D] to-[#00D4AA] text-white font-bold">
                        Join the Tea Party
                      </Button>
                    </Link>
                  )}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </motion.nav>

      {/* Spacer to prevent content from going under fixed nav */}
      <div className="h-16" />
    </>
  );
};

export default StickyNavigation;
